// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  GUIDE
  ADMIN
}

enum BookingStatus {
  WAITING_FOR_GUIDE_CONFIRMATION
  GUIDE_CANCELLED
  WAITING_FOR_PAYMENT
  WAITING_FOR_REFUND
  WAITING_FOR_TRAVELING
  TRAVELING
  FINISHED
  USER_CANCELLED
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String   @unique
  username       String   @unique
  hashedPassword String
  firstName      String
  lastName       String

  roles        Role[]        @default([USER])
  guide        Guide?
  review       Review[]
  posts        Post[]
  bookings     Booking[]
  transactions Transaction[]
}

model Location {
  id           Int    @id @default(autoincrement())
  locationName String @unique

  GuideLocation GuideLocation[]
  PostLocation  PostLocation[]
}

model TourStyle {
  id            Int    @id @default(autoincrement())
  tourStyleName String @unique

  GuideTourStyle GuideTourStyle[]
}

model Guide {
  id            Int    @id @default(autoincrement())
  userId        Int    @unique
  certificateId String

  paymentId         String
  taxId             String?
  brandBankAccount  String
  numberBankAccount String
  nameBankAccount   String

  user           User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reviews        Review[]
  GuideLocation  GuideLocation[]
  GuideTourStyle GuideTourStyle[]
}

model GuideLocation {
  guideId    Int
  locationId Int

  guide    Guide    @relation(fields: [guideId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([guideId, locationId])
}

model GuideTourStyle {
  guideId     Int
  tourStyleId Int

  guide     Guide     @relation(fields: [guideId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tourStyle TourStyle @relation(fields: [tourStyleId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([guideId, tourStyleId])
}

model Review {
  id          Int      @id @default(autoincrement())
  publishDate DateTime @default(now())
  score       Decimal  @db.Decimal(2, 1)
  text        String
  reviewerId  Int
  guideId     Int

  reviewer User  @relation(fields: [reviewerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  guide    Guide @relation(fields: [guideId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Post {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  title          String
  content        String
  authorId       Int
  tags           String[]
  fee            Decimal  @db.Decimal(10, 2)
  maxParticipant Int
  contactInfo    String

  author       User           @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookings     Booking[]
  PostLocation PostLocation[]
}

model PostLocation {
  postId     Int
  locationId Int

  post     Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([postId, locationId])
}

model Booking {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  startDate     DateTime
  endDate       DateTime
  bookingStatus BookingStatus @default(WAITING_FOR_GUIDE_CONFIRMATION)
  postId        Int
  userId        Int

  post  Post  @relation(fields: [postId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
  Transaction Transaction[]
}

model Transaction {
  id        Int      @ id @ default(autoincrement())
  createdAt DateTime @ default(now())
  updatedAt DateTime @ updatedAt
  paymentID String
  bookingId Int
  userId    Int

  booking Booking @ relation(fields: [bookingId], references: [id])
  user User @ relation(fields: [userId], references: [id])
}